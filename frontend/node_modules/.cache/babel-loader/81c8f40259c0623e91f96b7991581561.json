{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shrey Vegad\\\\Desktop\\\\GITHUB\\\\Mock-Stocks\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\Insights\\\\InsightsChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InsightsChart = props => {\n  _s();\n  const {\n    id,\n    purchases,\n    styleSet\n  } = props;\n  Chart.register(...registerables);\n  useEffect(() => {\n    let mounted = true;\n    const ctx = document.getElementById(id);\n    const data = {\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Initial Investment',\n        backgroundColor: '#2563EB',\n        borderColor: '#2563EB'\n      }]\n    };\n    const optionsSet = {\n      animation: true,\n      plugins: {\n        legend: {\n          display: true\n        }\n      },\n      responsive: true,\n      scales: {\n        x: {\n          display: true\n        },\n        y: {\n          display: true\n        }\n      }\n    };\n    const chartDrawn = new Chart(ctx, {\n      type: 'bar',\n      data: data,\n      options: optionsSet\n    });\n    if (mounted) {\n      for (let i = 0; i < purchases.length && i < 5; i++) {\n        data.labels.push(purchases[i].tickerBought);\n        data.datasets[0].data.push(parseFloat(purchases[i].initialInvestment));\n        chartDrawn.update();\n      }\n    }\n    return () => {\n      mounted = false;\n      chartDrawn.destroy();\n    };\n  }, [id, purchases]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styleSet,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(InsightsChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = InsightsChart;\nexport default InsightsChart;\nvar _c;\n$RefreshReg$(_c, \"InsightsChart\");","map":{"version":3,"names":["React","useEffect","Chart","registerables","jsxDEV","_jsxDEV","InsightsChart","props","_s","id","purchases","styleSet","register","mounted","ctx","document","getElementById","data","labels","datasets","label","backgroundColor","borderColor","optionsSet","animation","plugins","legend","display","responsive","scales","x","y","chartDrawn","type","options","i","length","push","tickerBought","parseFloat","initialInvestment","update","destroy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shrey Vegad/Desktop/GITHUB/Mock-Stocks/frontend/src/components/Dashboard/Insights/InsightsChart.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nconst InsightsChart = (props) => {\r\n  const { id, purchases, styleSet } = props;\r\n  Chart.register(...registerables);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const ctx = document.getElementById(id);\r\n    const data = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'Initial Investment',\r\n        backgroundColor: '#2563EB',\r\n        borderColor: '#2563EB'\r\n      }]\r\n    }\r\n\r\n    const optionsSet = {\r\n      animation: true,\r\n      plugins: {\r\n        legend: {\r\n          display: true\r\n        },\r\n      },\r\n      responsive: true,\r\n      scales: {\r\n        x: {\r\n          display: true\r\n        },\r\n        y: {\r\n          display: true\r\n        }\r\n      }\r\n    }\r\n\r\n    const chartDrawn = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: data,\r\n      options: optionsSet\r\n    });\r\n\r\n    if(mounted) {\r\n      for(let i = 0; i < purchases.length && i < 5; i++) {\r\n        data.labels.push(purchases[i].tickerBought)\r\n        data.datasets[0].data.push(parseFloat(purchases[i].initialInvestment));\r\n        chartDrawn.update()\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      mounted = false\r\n      chartDrawn.destroy();\r\n    }\r\n  }, [id, purchases])\r\n\r\n  return (\r\n    <div className={styleSet}>\r\n      <canvas id={id}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InsightsChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B,MAAM;IAAEC,EAAE;IAAEC,SAAS;IAAEC;EAAS,CAAC,GAAGJ,KAAK;EACzCL,KAAK,CAACU,QAAQ,CAAC,GAAGT,aAAa,CAAC;EAEhCF,SAAS,CAAC,MAAM;IACd,IAAIY,OAAO,GAAG,IAAI;IAElB,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAACP,EAAE,CAAC;IACvC,MAAMQ,IAAI,GAAG;MACXC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CAAC;QACTF,IAAI,EAAE,EAAE;QACRG,KAAK,EAAE,oBAAoB;QAC3BC,eAAe,EAAE,SAAS;QAC1BC,WAAW,EAAE;MACf,CAAC;IACH,CAAC;IAED,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE;QACX;MACF,CAAC;MACDC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDH,OAAO,EAAE;QACX,CAAC;QACDI,CAAC,EAAE;UACDJ,OAAO,EAAE;QACX;MACF;IACF,CAAC;IAED,MAAMK,UAAU,GAAG,IAAI9B,KAAK,CAACY,GAAG,EAAE;MAChCmB,IAAI,EAAE,KAAK;MACXhB,IAAI,EAAEA,IAAI;MACViB,OAAO,EAAEX;IACX,CAAC,CAAC;IAEF,IAAGV,OAAO,EAAE;MACV,KAAI,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,SAAS,CAAC0B,MAAM,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACjDlB,IAAI,CAACC,MAAM,CAACmB,IAAI,CAAC3B,SAAS,CAACyB,CAAC,CAAC,CAACG,YAAY,CAAC;QAC3CrB,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACF,IAAI,CAACoB,IAAI,CAACE,UAAU,CAAC7B,SAAS,CAACyB,CAAC,CAAC,CAACK,iBAAiB,CAAC,CAAC;QACtER,UAAU,CAACS,MAAM,EAAE;MACrB;IACF;IAEA,OAAO,MAAM;MACX5B,OAAO,GAAG,KAAK;MACfmB,UAAU,CAACU,OAAO,EAAE;IACtB,CAAC;EACH,CAAC,EAAE,CAACjC,EAAE,EAAEC,SAAS,CAAC,CAAC;EAEnB,oBACEL,OAAA;IAAKsC,SAAS,EAAEhC,QAAS;IAAAiC,QAAA,eACvBvC,OAAA;MAAQI,EAAE,EAAEA;IAAG;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAU;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrB;AAEV,CAAC;AAAAxC,EAAA,CA7DKF,aAAa;AAAA2C,EAAA,GAAb3C,aAAa;AA+DnB,eAAeA,aAAa;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}